#include <stdio.h> 
#include <locale.h>
#include <windows.h>
#include <conio.h> 
#define MAXLINE 1024 
#define N 32
void main(void)
{
	HANDLE hStdout;
	FILE *fpin;   // входной файл 
	FILE *fp;
	char line[MAXLINE], word[N]; // текущая строка  
	char kl_words[N][MAXLINE];
	char *ptr;
	int flag = 0, comment = 0, k = 0, i = 0;
	WORD foregroundColor;
	WORD backgroundColor; // цвет фона  
	WORD textAttribute;  // атрибут текста - цвет символа и фона 
	hStdout = GetStdHandle(STD_OUTPUT_HANDLE); // Получить стандартный дескриптор   
	foregroundColor = FOREGROUND_INTENSITY | FOREGROUND_BLUE;
	backgroundColor = 0;
	textAttribute = foregroundColor | backgroundColor;
	setlocale(LC_ALL, "Rus");
	fopen_s(&fpin, "test.txt", "rt"); // открыть файл для чтения  
	if (fpin == NULL)
		return;    // ошибка при открытии файла 
	fopen_s(&fp, "words.txt", "rt"); // открыть файл для чтения  
	if (fp == NULL)
		return;    // ошибка при открытии файла 
	while (!feof(fp))// цикл до конца входного файла
	{
		k = 0;
		ptr = fgets(line, MAXLINE, fp); // чтение строки 
		if (ptr == NULL)
			break; // файл исчерпан 
		while ((line[k] != '\n') && (line[k] != '\0'))
		{
			kl_words[i][k] = line[k];
			k++;
		}
		kl_words[i][k] = '\0';
		if (ptr == NULL)
			break; // файл исчерпан 
		i++;
	}
	while (!feof(fpin))// цикл до конца входного файла
	{
		flag = 0;
		ptr = fgets(line, MAXLINE, fpin); // чтение строки 
		if (ptr == NULL)
			break; // файл исчерпан 
		while (*ptr != '\0')
		{
			if ((*ptr == ' ') || (*ptr == ';') || (*ptr == '(') || (*ptr == '{') || (*ptr == '\n') || (*ptr == '\0') || (*ptr == '\t') || (*ptr == ')') || (*ptr == '[') || (*ptr == ']') || (*ptr == '}') || (*ptr == ':'))
			{
				for (i = 0; i < N; i++)
					if ((flag == 0) && (comment == 0) && (!(strcmp(word, kl_words[i]))))
						SetConsoleTextAttribute(hStdout, textAttribute);
				for (i = 0; i < k; i++)
					printf("%c", word[i]);
				SetConsoleTextAttribute(hStdout, 7);
				printf("%c", *ptr);
				for (i = 0; i <= k; i++)
					word[i] = NULL;
				k = 0;

			}
			else
				word[k++] = *ptr;
			if ((*ptr == '/') && (*(ptr + 1) == '*'))
				comment = 1;
			if ((*ptr == '*') && (*(ptr + 1) == '/'))
				comment = 0;
			if ((*ptr == '/') && (*(ptr + 1) == '/'))
				flag = 1;
			ptr++;
		}
	}
	fclose(fpin); // закрыть входной файл
	_getch();
}
